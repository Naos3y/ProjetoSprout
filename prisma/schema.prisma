// schema.prisma

// Define a configuração do banco de dados
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

// Define os modelos correspondentes às tabelas do banco de dados
model user {
  uid             Int     @id @default(autoincrement())
  ucountry        String
  urole           String
  teamtid         Int?
  uadminrights    Int
  utype           String
  uemployeenumber String
  uname           String
  uphoto          String
  udirectreport   String?
  ustartdate      String
  ucity           String
  uleader         String?
  useniority      String

  team          team?           @relation(fields: [teamtid], references: [tid])
  login         login[]
  regularuser   regularuser[]
  insideteacher insideteacher[]
  userhasgroup  userhasgroup[]
}

model userhasgroup {
  useruid  Int
  groupgid Int

  user  user  @relation(fields: [useruid], references: [uid])
  group group @relation(fields: [groupgid], references: [gid])

  @@id([useruid, groupgid])
}

model group {
  gid          Int            @id @default(autoincrement())
  gname        String
  userhasgroup userhasgroup[]
}

model team {
  tid           Int         @id @default(autoincrement())
  departmentdid Int?
  tname         String
  department    department? @relation(fields: [departmentdid], references: [did])
  user          user[]
}

model department {
  did   Int    @id @default(autoincrement())
  dname String
  team  team[]
}

model login {
  lid       Int     @id @default(autoincrement())
  useruid   Int?
  lemail    String
  lpassword String?
  user      user?   @relation(fields: [useruid], references: [uid])
}

model regularuser {
  ruid    Int @id @default(autoincrement())
  useruid Int

  user                           user                             @relation(fields: [useruid], references: [uid])
  trainingplan                   trainingplan?                    @relation(fields: [trainingplanTrpid], references: [trpid])
  trainingplanTrpid              Int?
  userhastrainingplans           userhastrainingplans[]
  regularuserhasoutsidetrainings regularuserhasoutsidetrainings[]
  regularuserhasinsidetrainings  regularuserhasinsidetrainings[]
}

model insideteacher {
  itrid   Int @id @default(autoincrement())
  useruid Int

  user                             user                               @relation(fields: [useruid], references: [uid])
  insideteacherhasinsidestrainings insideteacherhasinsidestrainings[]
}

model outsideteacher {
  otrid            Int                @id @default(autoincrement())
  otname           String
  outsidetrainings outsidetrainings[]
}

model trainingplantemplate {
  trtid      Int     @id @default(autoincrement())
  tptname    String
  tptstarted Boolean @default(false)

  trainingplan                            trainingplan[]
  trainingplantemplatehasinsidetrainings  trainingplantemplatehasinsidetrainings[]
  trainingplantemplatehasoutsidetrainings trainingplantemplatehasoutsidetrainings[]
}

model trainingplan {
  trpid                     Int      @id @default(autoincrement())
  tpstartingdate            String
  trainingplantemplatetrtid Int

  trainingplantemplate trainingplantemplate @relation(fields: [trainingplantemplatetrtid], references: [trtid])

  regularuser          regularuser[]
  userhastrainingplans userhastrainingplans[]

  @@unique([trpid, trainingplantemplatetrtid], name: "uk_trpid")
}

model insidetrainings {
  itid              Int      @id @default(autoincrement())
  itname            String
  itnumofmin        String
  iteventtype       String
  itminparticipants String
  itmaxparticipants String
  ittrainingarea    String
  itdescription     String?
  itstarted         Boolean @default(false)
  itstartdate       String?
  // falta a location

  insideteacherhasinsidestrainings insideteacherhasinsidestrainings[]

  regularuserhasinsidetrainings          regularuserhasinsidetrainings[]
  trainingplantemplatehasinsidetrainings trainingplantemplatehasinsidetrainings[]

  @@unique([itid, ittrainingarea], name: "uk_itid")
}

model outsidetrainings {
  otid               Int    @id @default(autoincrement())
  outsideteacherotid Int
  otname             String
  otnumofmin         String
  oteventtype        String
  otminparticipants  String
  otmaxparticipants  String
  // falta description, started, start date e location

  outsideteacher outsideteacher @relation(fields: [outsideteacherotid], references: [otrid])

  regularuserhasoutsidetrainings          regularuserhasoutsidetrainings[]
  trainingplantemplatehasoutsidetrainings trainingplantemplatehasoutsidetrainings[]

  @@unique([otid, outsideteacherotid], name: "uk_otid")
}

model userhastrainingplans {
  regularuserruid   Int
  trainingplantrpid Int

  regularuser  regularuser  @relation(fields: [regularuserruid], references: [ruid])
  trainingplan trainingplan @relation(fields: [trainingplantrpid], references: [trpid])

  @@id([regularuserruid, trainingplantrpid])
}

model regularuserhasoutsidetrainings {
  regularuserruid      Int
  outsidetrainingsitid Int
  rotstartdate         String

  regularuser      regularuser      @relation(fields: [regularuserruid], references: [ruid])
  outsidetrainings outsidetrainings @relation(fields: [outsidetrainingsitid], references: [otid])

  @@id([regularuserruid, outsidetrainingsitid])
}

model insideteacherhasinsidestrainings {
  insideteacheritrid   Int
  insidestrainingsitid Int

  insideteacher    insideteacher   @relation(fields: [insideteacheritrid], references: [itrid])
  insidestrainings insidetrainings @relation(fields: [insidestrainingsitid], references: [itid])

  @@id([insideteacheritrid, insidestrainingsitid])
}

model regularuserhasinsidetrainings {
  regularuserruid     Int
  insidetrainingsitid Int
  uhitmandatory       Boolean? @default(false)
  uhitpending         Boolean? @default(true)

  regularuser     regularuser     @relation(fields: [regularuserruid], references: [ruid])
  insidetrainings insidetrainings @relation(fields: [insidetrainingsitid], references: [itid])

  @@id([regularuserruid, insidetrainingsitid])
}

model trainingplantemplatehasinsidetrainings {
  trainingplantemplatetrtid Int
  insidetrainingsitid       Int
  tptipriority              Int?

  trainingplantemplate trainingplantemplate @relation(fields: [trainingplantemplatetrtid], references: [trtid])
  insidetrainings      insidetrainings      @relation(fields: [insidetrainingsitid], references: [itid])

  @@id([trainingplantemplatetrtid, insidetrainingsitid])
}

model trainingplantemplatehasoutsidetrainings {
  trainingplantemplatetrtid Int
  outsidetrainingsotid      Int

  trainingplantemplate trainingplantemplate @relation(fields: [trainingplantemplatetrtid], references: [trtid])
  outsidetrainings     outsidetrainings     @relation(fields: [outsidetrainingsotid], references: [otid])

  @@id([trainingplantemplatetrtid, outsidetrainingsotid])
}
